/*
 *   Copyright (c) 2024 Emon Thakur
 *   All rights reserved.
 */
#include<iostream>
#include<string.h>
#include<math.h>
#include<thread>
#include<cctype>
#include<algorithm>
using namespace std;
#define green "\033[1;32m"
#define red "\033[1;31m"
#define cyan "\033[1;36m"
#define white "\033[1;37m"
#define yellow "\033[1;33m"
#define resetc "\033[1;0m"
#define bold  "\x1B[1m"
#define resett  "\x1B[0m"

int towerA[101],towerB[101],towerC[101];
int topA,topB,topC;
int height=0,step=0;
string emptyString;

void changeDisk(char from, char to)
{
	int tmp;
	if(from=='A' && to=='B')
	{
		tmp=towerA[topA];
		towerA[topA]=0;
		topA--;
		towerB[++topB]=tmp;
	}
	else if(from=='A' && to=='C')
	{
		tmp=towerA[topA];
		towerA[topA]=0;
		topA--;
		towerC[++topC]=tmp;
	}
	else if(from=='B' && to=='C')
	{
		tmp=towerB[topB];
		towerB[topB]=0;
		topB--;
		towerC[++topC]=tmp;
	}
	else if(from=='B' && to=='A')
	{
		tmp=towerB[topB];
		towerB[topB]=0;
		topB--;
		towerA[++topA]=tmp;
	}
	else if(from=='C' && to=='A')
	{
		tmp=towerC[topC];
	    towerC[topC]=0;
		--topC;
		towerA[++topA]=tmp;
	}
	else if(from=='C' && to=='B')
	{
		tmp=towerC[topC];
		towerC[topC]=0;
		--topC;
		towerB[++topB]=tmp;
	}
}


void showTowers()
{
	system("cls");
	for(int i=height;i>0;i--)
	{
		cout<<"\t";
		if(towerA[i]==0) cout<<"|"<<"\t\t";
		else cout<<green<<towerA[i]<<"\t\t"<<resetc;

		if(towerB[i]==0) cout<<"|"<<"\t\t";
		else cout<<red<<towerB[i]<<"\t\t"<<resetc;

		if(towerC[i]==0) cout<<"|"<<"\t\t"<<endl;
		else cout<<yellow<<towerC[i]<<resetc<<endl;
	}
	cout<<bold<<"       ____\t      ____\t      ____"<<resett<<endl;
	cout<<bold<<"\t"<<green<<"A"<<red<<"\t\tB\t\t"<<yellow<<"C\n\n"<<resett<<resetc<<endl;
}

void solutionOfTOH(int NumberOfDisks,char A, char C, char B, bool automatic)
{
    if(NumberOfDisks==1)
	{
		changeDisk(A,C);
		if(automatic) this_thread::sleep_for(2000ms);
		else 
		{
	    	printf("press enter to continue: ");
	    	getline(cin,emptyString);
		}
		showTowers();
		printf("%sstep %s%d: %c -> %c \n\n",red,resetc,++step,A,C);
		return;
	}
	solutionOfTOH(NumberOfDisks-1 , A , B , C , automatic);
	changeDisk(A,C);
	if(automatic) this_thread::sleep_for(2000ms);
	else 
	{
	    printf("press enter to continue: ");
	    getline(cin,emptyString);
	}
	showTowers();
	printf("%sstep%s %d: %c -> %c \n\n",red,resetc,++step,A,C);
	solutionOfTOH(NumberOfDisks-1 , B , C , A, automatic);
}

void resetTowers()
{
	for(int i=0;i<=100;i++)
	{
		towerA[i] = 0;
		towerB[i] = 0;
		towerC[i] = 0;
	}
	height = 0;
	step = 0;
}

bool validMove(char from, char to)
{
	if(from == to) return false;
	if(from != 'A' && from != 'B' && from != 'C') return false;
	if(to != 'A' && to != 'B' && to != 'C') return false;
	return true;
}

bool gameOver(int disk)
{
	return disk == topC;
}

void playGame()
{
	system("cls");
	cout<<"Enter the number of disks: ";
	int disk; cin>> disk;
	//getline(cin,emptyString);
	height=disk+1;
	topA=disk,topB=0,topC=0;
	for(int i=1;i<=disk;i++) towerA[disk-i+1]=i;

	string nextMove;
	int moveCount = 0;
	while(true)
	{
		system("cls");
		showTowers();
		cout<<"moves : "<<moveCount<<endl;
		cout<<"your next move(ex: A to B): ";
		getline(cin,nextMove);

        char from = toupper(nextMove[0]);
		char to = toupper(nextMove[nextMove.size()-1]);
		if(validMove(from,to))
		{
			++moveCount;
			changeDisk(from,to);
			if(gameOver(disk))
			{
				system("cls");
				showTowers();
				cout<<green<<bold<<"congratulations, you are done\n"<<resetc<<resett<<endl;
				cout<<"Moves required : "<<moveCount<<endl;
				cout<<"Minimum possible moves for "<<disk<<" disks is : "<<pow(2,disk)-1<<"\n\n"; 
				break;
			}
		}
		else continue;
	}
	cout<<"press enter to continue: "<<endl;
	getline(cin,emptyString);
}

void seeSolution(bool automatic)
{
	system("cls");
	cout<<"Enter the number of disks: ";
	int disk; cin>> disk;
	getline(cin,emptyString);
	height=disk+1;
	topA=disk,topB=0,topC=0;
	for(int i=1;i<=disk;i++) towerA[disk-i+1]=i;

	char from='A',to='C',use='B';
	showTowers();
	solutionOfTOH(disk , from , to , use, automatic);

	cout<<red<<"Total number of operations: "<<resetc<<pow(2,disk)-1<<endl<<endl;

	cout<<"press enter to go to main: ";
	getline(cin,emptyString);
}

int main()
{
	system("cls");
	cout<<"Chose an option : \n\n";
	cout<<"1. Play game\n";
	cout<<"2. See solution(automatic)\n";
	cout<<"3. See solution(manual)\n\n";

	cout<<"enter a number (1/2/3): ";
	int userChoice; cin >> userChoice;

	if(userChoice == 1) playGame();
	else if(userChoice == 2) seeSolution(true);
	else if(userChoice == 3) seeSolution(false);
	resetTowers();
	main();
}
